# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  createdAt: DateTime!
  email: String
  externalApps: JSONObject
  operationsUsedMonth: Int!
  plan: String!
  nextPlan: String
  planPeriodEnd: DateTime
  name: String
  subscribedToNotifications: Boolean!
  subscribedToNewsletter: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type IntegrationAccount {
  id: ID!
  createdAt: DateTime!
  key: String!
  name: String!
  description: String
  authType: IntegrationAuthType!
  fieldsSchema: JSONObject
}

"""Authentication strategy"""
enum IntegrationAuthType {
  apiKey
  http
  oauth1
  oauth2
  openIdConnect
  custom
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type IntegrationAccountEdge {
  """The node containing the IntegrationAccount"""
  node: IntegrationAccount!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type IntegrationAccountConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [IntegrationAccountEdge!]!
}

type IntegrationTrigger {
  id: ID!
  createdAt: DateTime!
  integration: Integration!
  key: String!
  name: String!
  description: String
  unlisted: Boolean!
  deprecated: Boolean!
  category: String
  skipAuth: Boolean!
  pinned: Boolean!
  schemaRequest: JSONObject!
  schemaResponse: JSONObject
  instant: Boolean!
  isWebhook: Boolean!
  hookInstructions: String
  integrationAction: IntegrationAction!
}

type OperationCategory {
  key: String!
  name: String!
  description: String
  numberOfActions: Int!
  numberOfTriggers: Int!
}

type Integration {
  id: ID!
  createdAt: DateTime!
  key: String!
  name: String!
  logo: String
  version: String!
  deprecated: Boolean!
  parentKey: String
  integrationAccount: IntegrationAccount
  integrationCategories: String!
  operationCategories: [OperationCategory!]
  numberOfTriggers: Int!
  numberOfActions: Int!
  triggers(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: IntegrationTriggerFilter = {}

    """Specify to sort results."""
    sorting: [IntegrationTriggerSort!] = []
  ): IntegrationTriggersConnection!
  actions(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: IntegrationActionFilter = {}

    """Specify to sort results."""
    sorting: [IntegrationActionSort!] = []
  ): IntegrationActionsConnection!
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input IntegrationTriggerFilter {
  and: [IntegrationTriggerFilter!]
  or: [IntegrationTriggerFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  integration: IDFilterComparison
  key: StringFieldComparison
  name: StringFieldComparison
  unlisted: BooleanFieldComparison
  deprecated: BooleanFieldComparison
  category: StringFieldComparison
  skipAuth: BooleanFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input IntegrationTriggerSort {
  field: IntegrationTriggerSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum IntegrationTriggerSortFields {
  id
  createdAt
  integration
  key
  name
  unlisted
  deprecated
  category
  skipAuth
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input IntegrationActionFilter {
  and: [IntegrationActionFilter!]
  or: [IntegrationActionFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  integration: IDFilterComparison
  key: StringFieldComparison
  name: StringFieldComparison
  unlisted: BooleanFieldComparison
  deprecated: BooleanFieldComparison
  category: StringFieldComparison
  type: OperationTypeFilterComparison
  skipAuth: BooleanFieldComparison
}

input OperationTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: OperationType
  neq: OperationType
  gt: OperationType
  gte: OperationType
  lt: OperationType
  lte: OperationType
  like: OperationType
  notLike: OperationType
  iLike: OperationType
  notILike: OperationType
  in: [OperationType!]
  notIn: [OperationType!]
}

"""Operation type"""
enum OperationType {
  OffChain
  EVM
}

input IntegrationActionSort {
  field: IntegrationActionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum IntegrationActionSortFields {
  id
  createdAt
  integration
  key
  name
  unlisted
  deprecated
  category
  type
  skipAuth
}

type IntegrationAction {
  id: ID!
  createdAt: DateTime!
  integration: Integration!
  key: String!
  name: String!
  description: String
  unlisted: Boolean!
  deprecated: Boolean!
  category: String
  type: OperationType!
  skipAuth: Boolean!
  pinned: Boolean!
  schemaRequest: JSONObject!
  schemaResponse: JSONObject
}

type IntegrationActionEdge {
  """The node containing the IntegrationAction"""
  node: IntegrationAction!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type IntegrationActionConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [IntegrationActionEdge!]!
}

type IntegrationTriggerEdge {
  """The node containing the IntegrationTrigger"""
  node: IntegrationTrigger!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type IntegrationTriggerConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [IntegrationTriggerEdge!]!
}

type IntegrationCategory {
  id: ID!
  key: String!
  name: String!
}

type IntegrationEdge {
  """The node containing the Integration"""
  node: Integration!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type IntegrationConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [IntegrationEdge!]!
}

type IntegrationActionsConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [IntegrationActionEdge!]!
}

type IntegrationTriggersConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [IntegrationTriggerEdge!]!
}

type AccountCredential {
  id: ID!
  createdAt: DateTime!
  integrationAccount: IntegrationAccount!
  name: String!
  fields: JSONObject
  schemaRefs: JSONObject
  authExpired: Boolean!
}

type WorkflowNextAction {
  action: WorkflowAction!
  condition: String
}

type WorkflowAction {
  id: ID!
  createdAt: DateTime!
  workflow: Workflow!
  isRootAction: Boolean!
  integrationAction: IntegrationAction!
  name: String!
  inputs: JSONObject
  nextActions: [WorkflowNextAction!]
  lastItem: JSONObject
  credentials: AccountCredential
  schemaResponse: JSONObject
  type: OperationType!
  address: String!
}

type Workflow {
  id: ID!
  createdAt: DateTime!
  ownerAddress: String!
  name: String!
  state: String
  runOnFailure: ID
  address: String
  network: String
  isTemplate: Boolean
  isPublic: Boolean!
  templateSchema: JSONObject
  usedIntegrations: [String!]
  trigger: WorkflowTrigger
  actions(
    """Limit or page results."""
    paging: CursorPaging = {first: 40}

    """Specify to filter the records returned."""
    filter: WorkflowActionFilter = {}

    """Specify to sort results."""
    sorting: [WorkflowActionSort!] = []
  ): WorkflowActionsConnection
}

input WorkflowActionFilter {
  and: [WorkflowActionFilter!]
  or: [WorkflowActionFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  workflow: IDFilterComparison
  isRootAction: BooleanFieldComparison
}

input WorkflowActionSort {
  field: WorkflowActionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum WorkflowActionSortFields {
  id
  createdAt
  workflow
  isRootAction
}

type WorkflowTrigger {
  id: ID!
  createdAt: DateTime!
  workflow: Workflow!
  integrationTrigger: IntegrationTrigger!
  name: String!
  inputs: JSONObject
  credentials: AccountCredential
  lastCheck: DateTime
  schedule: JSONObject
  enabled: Boolean!
  maxConsecutiveFailures: Int!
  maxItemsPerRun: Int!
  lastItem: JSONObject
  hookId: String
  schemaResponse: JSONObject
}

type RequestMigrationPayload {
  result: Boolean!
}

type ResultPayload {
  success: Boolean!
}

type UserCheckoutSessionPayload {
  sessionId: String!
}

type VerifyEmailPayload {
  error: String
}

type UserEdge {
  """The node containing the User"""
  node: User!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type CompileWorkflow {
  bytecode: String!
  abi: [JSONObject!]!
  sourcecode: String!
}

type WorkflowEdge {
  """The node containing the Workflow"""
  node: Workflow!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type WorkflowConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [WorkflowEdge!]!
}

type Template {
  id: ID!
  createdAt: DateTime!
  ownerAddress: String!
  name: String!
  state: String
  runOnFailure: ID
  address: String
  network: String
  isTemplate: Boolean
  isPublic: Boolean!
  templateSchema: JSONObject
  usedIntegrations: [String!]
  trigger: WorkflowTrigger
  actions(
    """Limit or page results."""
    paging: CursorPaging = {first: 40}

    """Specify to filter the records returned."""
    filter: WorkflowActionFilter = {}

    """Specify to sort results."""
    sorting: [WorkflowActionSort!] = []
  ): WorkflowActionsConnection
  integrationKey: String
}

type TemplateEdge {
  """The node containing the Template"""
  node: Template!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type WorkflowDeleteResponse {
  id: ID
  createdAt: DateTime
  ownerAddress: String
  name: String
  state: String
  runOnFailure: ID
  address: String
  network: String
  isTemplate: Boolean
  isPublic: Boolean
  templateSchema: JSONObject
  usedIntegrations: [String!]
}

type WorkflowActionEdge {
  """The node containing the WorkflowAction"""
  node: WorkflowAction!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type WorkflowActionsConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [WorkflowActionEdge!]!
}

type BlockchainTransaction {
  chainId: Float!
  hash: String!
}

type WorkflowRunAction {
  id: ID!
  createdAt: DateTime!
  workflowAction: WorkflowAction!
  integrationName: String!
  operationName: String!
  itemId: ID!
  status: WorkflowRunStatus!
  finishedAt: DateTime
  transactions: [BlockchainTransaction!]
}

"""Status of a workflow run"""
enum WorkflowRunStatus {
  running
  sleeping
  completed
  failed
}

type WorkflowRunTrigger {
  workflowTrigger: WorkflowTrigger!
  integrationName: String!
  operationName: String!
  status: WorkflowRunStatus!
  workflowTriggered: Boolean
  triggerIds: [String!]
  finishedAt: DateTime
}

type WorkflowRun {
  id: ID!
  createdAt: DateTime!
  workflow: Workflow!
  status: WorkflowRunStatus!
  triggerRun: WorkflowRunTrigger
  actionRuns: [WorkflowRunAction!]!
  startedBy: WorkflowRunStartedByOptions!
  operationsUsed: Int!
  errorMessage: String
  errorResponse: String
  inputs: JSONObject
}

"""Specifies who started the workflow run"""
enum WorkflowRunStartedByOptions {
  user
  trigger
  workflowFailure
}

type WorkflowRunEdge {
  """The node containing the WorkflowRun"""
  node: WorkflowRun!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type WorkflowRunConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [WorkflowRunEdge!]!
}

type WorkflowRunTriggerEdge {
  """The node containing the WorkflowRunTrigger"""
  node: WorkflowRunTrigger!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type WorkflowRunTriggerConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [WorkflowRunTriggerEdge!]!
}

type WorkflowRunActionEdge {
  """The node containing the WorkflowRunAction"""
  node: WorkflowRunAction!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type WorkflowRunActionConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [WorkflowRunActionEdge!]!
}

type WorkflowTriggerDeleteResponse {
  id: ID
  createdAt: DateTime
  workflow: ID
  integrationTrigger: ID
  name: String
  inputs: JSONObject
  credentials: AccountCredential
  lastCheck: DateTime
  schedule: JSONObject
  enabled: Boolean
  maxConsecutiveFailures: Int
  maxItemsPerRun: Int
  lastItem: JSONObject
  hookId: String
  schemaResponse: JSONObject
}

type WorkflowTriggerEdge {
  """The node containing the WorkflowTrigger"""
  node: WorkflowTrigger!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type WorkflowTriggerConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [WorkflowTriggerEdge!]!
}

type WorkflowActionDeleteResponse {
  id: ID
  createdAt: DateTime
  workflow: ID
  isRootAction: Boolean
  integrationAction: ID
  name: String
  inputs: JSONObject
  nextActions: [WorkflowNextAction!]
  lastItem: JSONObject
  credentials: ID
  schemaResponse: JSONObject
  type: OperationType
  address: String
}

type WorkflowActionConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [WorkflowActionEdge!]!
}

type WorkflowNextActionEdge {
  """The node containing the WorkflowNextAction"""
  node: WorkflowNextAction!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type WorkflowNextActionConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [WorkflowNextActionEdge!]!
}

type ConnectAccountDataPayload {
  data: JSONObject!
}

type AccountCredentialDeleteResponse {
  id: ID
  createdAt: DateTime
  integrationAccount: ID
  name: String
  fields: JSONObject
  schemaRefs: JSONObject
  authExpired: Boolean
}

type AccountCredentialEdge {
  """The node containing the AccountCredential"""
  node: AccountCredential!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type AccountCredentialConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [AccountCredentialEdge!]!
}

type AsyncSchema {
  schemas: JSONObject!
  schemaExtension: JSONObject!
}

type ContractSchema {
  id: ID!
  chainId: Int!
  address: String!
  schema: JSONObject!
}

type Query {
  user(
    """The id of the record to find."""
    id: ID!
  ): User!
  viewer: User!
  accountCredential(
    """The id of the record to find."""
    id: ID!
  ): AccountCredential!
  accountCredentials(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: AccountCredentialFilter = {}

    """Specify to sort results."""
    sorting: [AccountCredentialSort!] = []
  ): AccountCredentialConnection!
  accountCreationData(key: String!): ConnectAccountDataPayload!
  integration(
    """The id of the record to find."""
    id: ID!
  ): Integration!
  integrations(
    search: String

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: IntegrationFilter = {}

    """Specify to sort results."""
    sorting: [IntegrationSort!] = []
  ): IntegrationConnection!
  integrationCategories: [IntegrationCategory!]!
  integrationCategory(id: String!): IntegrationCategory
  integrationAccount(
    """The id of the record to find."""
    id: ID!
  ): IntegrationAccount!
  integrationAccounts(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: IntegrationAccountFilter = {}

    """Specify to sort results."""
    sorting: [IntegrationAccountSort!] = []
  ): IntegrationAccountConnection!
  integrationAction(
    """The id of the record to find."""
    id: ID!
  ): IntegrationAction!
  integrationActions(
    search: String

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: IntegrationActionFilter = {}

    """Specify to sort results."""
    sorting: [IntegrationActionSort!] = []
  ): IntegrationActionConnection!
  integrationTrigger(
    """The id of the record to find."""
    id: ID!
  ): IntegrationTrigger!
  integrationTriggers(
    search: String

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: IntegrationTriggerFilter = {}

    """Specify to sort results."""
    sorting: [IntegrationTriggerSort!] = []
  ): IntegrationTriggerConnection!
  workflow(
    """The id of the record to find."""
    id: ID!
  ): Workflow!
  workflows(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: WorkflowFilter = {}

    """Specify to sort results."""
    sorting: [WorkflowSort!] = []
  ): WorkflowConnection!
  compileWorkflow(workflowId: ID!): CompileWorkflow!
  recommendedTemplates(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: TemplateFilter = {}

    """Specify to sort results."""
    sorting: [TemplateSort!] = []
  ): WorkflowConnection!
  workflowAction(
    """The id of the record to find."""
    id: ID!
  ): WorkflowAction!
  workflowActions(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: WorkflowActionFilter = {}

    """Specify to sort results."""
    sorting: [WorkflowActionSort!] = []
  ): WorkflowActionConnection!
  workflowNextAction(
    """The id of the record to find."""
    id: ID!
  ): WorkflowNextAction!
  workflowNextActions(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: WorkflowNextActionFilter = {}

    """Specify to sort results."""
    sorting: [WorkflowNextActionSort!] = []
  ): WorkflowNextActionConnection!
  workflowTrigger(
    """The id of the record to find."""
    id: ID!
  ): WorkflowTrigger!
  workflowTriggers(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: WorkflowTriggerFilter = {}

    """Specify to sort results."""
    sorting: [WorkflowTriggerSort!] = []
  ): WorkflowTriggerConnection!
  workflowRun(
    """The id of the record to find."""
    id: ID!
  ): WorkflowRun!
  workflowRuns(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: WorkflowRunFilter = {}

    """Specify to sort results."""
    sorting: [WorkflowRunSort!] = []
  ): WorkflowRunConnection!
  workflowRunTrigger(
    """The id of the record to find."""
    id: ID!
  ): WorkflowRunTrigger!
  workflowRunTriggers(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: WorkflowRunTriggerFilter = {}

    """Specify to sort results."""
    sorting: [WorkflowRunTriggerSort!] = []
  ): WorkflowRunTriggerConnection!
  workflowRunAction(
    """The id of the record to find."""
    id: ID!
  ): WorkflowRunAction!
  workflowRunActions(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: WorkflowRunActionFilter = {}

    """Specify to sort results."""
    sorting: [WorkflowRunActionSort!] = []
  ): WorkflowRunActionConnection!
  contractSchema(chainId: Int!, address: String!, type: String!): ContractSchema!
  asyncSchemas(integrationId: String!, accountCredentialId: String!, names: [String!]!, inputs: JSONObject, integrationTriggerId: String, integrationActionId: String): AsyncSchema!
  manyAsyncSchemas(asyncSchemaInputs: [JSONObject!]!): AsyncSchema!
}

input AccountCredentialFilter {
  and: [AccountCredentialFilter!]
  or: [AccountCredentialFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  integrationAccount: IDFilterComparison
}

input AccountCredentialSort {
  field: AccountCredentialSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum AccountCredentialSortFields {
  id
  createdAt
  integrationAccount
}

input IntegrationFilter {
  and: [IntegrationFilter!]
  or: [IntegrationFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  key: StringFieldComparison
  name: StringFieldComparison
  version: StringFieldComparison
  deprecated: BooleanFieldComparison
  parentKey: StringFieldComparison
  integrationCategories: StringFieldComparison
  numberOfTriggers: IntFieldComparison
  numberOfActions: IntFieldComparison
}

input IntFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Int
  neq: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int!]
  notIn: [Int!]
  between: IntFieldComparisonBetween
  notBetween: IntFieldComparisonBetween
}

input IntFieldComparisonBetween {
  lower: Int!
  upper: Int!
}

input IntegrationSort {
  field: IntegrationSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum IntegrationSortFields {
  id
  createdAt
  key
  name
  version
  deprecated
  parentKey
  integrationCategories
  numberOfTriggers
  numberOfActions
}

input IntegrationAccountFilter {
  and: [IntegrationAccountFilter!]
  or: [IntegrationAccountFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  key: StringFieldComparison
  name: StringFieldComparison
}

input IntegrationAccountSort {
  field: IntegrationAccountSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum IntegrationAccountSortFields {
  id
  createdAt
  key
  name
}

input WorkflowFilter {
  and: [WorkflowFilter!]
  or: [WorkflowFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  name: StringFieldComparison
}

input WorkflowSort {
  field: WorkflowSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum WorkflowSortFields {
  id
  createdAt
  name
}

input TemplateFilter {
  and: [TemplateFilter!]
  or: [TemplateFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  name: StringFieldComparison
  integrationKey: StringFieldComparison
}

input TemplateSort {
  field: TemplateSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum TemplateSortFields {
  id
  createdAt
  name
  integrationKey
}

input WorkflowNextActionFilter {
  and: [WorkflowNextActionFilter!]
  or: [WorkflowNextActionFilter!]
  action: IDFilterComparison
}

input WorkflowNextActionSort {
  field: WorkflowNextActionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum WorkflowNextActionSortFields {
  action
}

input WorkflowTriggerFilter {
  and: [WorkflowTriggerFilter!]
  or: [WorkflowTriggerFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  workflow: IDFilterComparison
}

input WorkflowTriggerSort {
  field: WorkflowTriggerSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum WorkflowTriggerSortFields {
  id
  createdAt
  workflow
}

input WorkflowRunFilter {
  and: [WorkflowRunFilter!]
  or: [WorkflowRunFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  workflow: IDFilterComparison
  status: WorkflowRunStatusFilterComparison
  startedBy: WorkflowRunStartedByOptionsFilterComparison
}

input WorkflowRunStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: WorkflowRunStatus
  neq: WorkflowRunStatus
  gt: WorkflowRunStatus
  gte: WorkflowRunStatus
  lt: WorkflowRunStatus
  lte: WorkflowRunStatus
  like: WorkflowRunStatus
  notLike: WorkflowRunStatus
  iLike: WorkflowRunStatus
  notILike: WorkflowRunStatus
  in: [WorkflowRunStatus!]
  notIn: [WorkflowRunStatus!]
}

input WorkflowRunStartedByOptionsFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: WorkflowRunStartedByOptions
  neq: WorkflowRunStartedByOptions
  gt: WorkflowRunStartedByOptions
  gte: WorkflowRunStartedByOptions
  lt: WorkflowRunStartedByOptions
  lte: WorkflowRunStartedByOptions
  like: WorkflowRunStartedByOptions
  notLike: WorkflowRunStartedByOptions
  iLike: WorkflowRunStartedByOptions
  notILike: WorkflowRunStartedByOptions
  in: [WorkflowRunStartedByOptions!]
  notIn: [WorkflowRunStartedByOptions!]
}

input WorkflowRunSort {
  field: WorkflowRunSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum WorkflowRunSortFields {
  id
  createdAt
  workflow
  status
  startedBy
}

input WorkflowRunTriggerFilter {
  and: [WorkflowRunTriggerFilter!]
  or: [WorkflowRunTriggerFilter!]
  status: WorkflowRunStatusFilterComparison
}

input WorkflowRunTriggerSort {
  field: WorkflowRunTriggerSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum WorkflowRunTriggerSortFields {
  status
}

input WorkflowRunActionFilter {
  and: [WorkflowRunActionFilter!]
  or: [WorkflowRunActionFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  status: WorkflowRunStatusFilterComparison
}

input WorkflowRunActionSort {
  field: WorkflowRunActionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum WorkflowRunActionSortFields {
  id
  createdAt
  status
}

type Mutation {
  updateOneUser(input: UpdateOneUserInput!): User!
  createCheckoutSession(priceId: String!): UserCheckoutSessionPayload!
  resumeSubscription: ResultPayload!
  changeSubscriptionPlan(priceId: String!): ResultPayload!
  verifyEmail(address: String!, code: String!): VerifyEmailPayload!
  requestMigration(email: String!): RequestMigrationPayload!
  completeMigration(email: String!, code: String!, data: String!): RequestMigrationPayload!
  createOneAccountCredential(input: CreateOneAccountCredentialInput!): AccountCredential!
  createManyAccountCredentials(input: CreateManyAccountCredentialsInput!): [AccountCredential!]!
  updateOneAccountCredential(input: UpdateOneAccountCredentialInput!): AccountCredential!
  updateManyAccountCredentials(input: UpdateManyAccountCredentialsInput!): UpdateManyResponse!
  deleteOneAccountCredential(input: DeleteOneAccountCredentialInput!): AccountCredentialDeleteResponse!
  deleteManyAccountCredentials(input: DeleteManyAccountCredentialsInput!): DeleteManyResponse!
  createOneWorkflow(input: CreateOneWorkflowInput!): Workflow!
  createManyWorkflows(input: CreateManyWorkflowsInput!): [Workflow!]!
  updateOneWorkflow(input: UpdateOneWorkflowInput!): Workflow!
  updateManyWorkflows(input: UpdateManyWorkflowsInput!): UpdateManyResponse!
  deleteOneWorkflow(input: DeleteOneWorkflowInput!): WorkflowDeleteResponse!
  deleteManyWorkflows(input: DeleteManyWorkflowsInput!): DeleteManyResponse!
  forkWorkflow(workflowId: ID!, templateInputs: JSONObject, credentialIds: JSONObject): Workflow!
  createOneWorkflowAction(input: CreateOneWorkflowActionInput!): WorkflowAction!
  createManyWorkflowActions(input: CreateManyWorkflowActionsInput!): [WorkflowAction!]!
  updateOneWorkflowAction(input: UpdateOneWorkflowActionInput!): WorkflowAction!
  updateManyWorkflowActions(input: UpdateManyWorkflowActionsInput!): UpdateManyResponse!
  deleteOneWorkflowAction(input: DeleteOneWorkflowActionInput!): WorkflowActionDeleteResponse!
  deleteManyWorkflowActions(input: DeleteManyWorkflowActionsInput!): DeleteManyResponse!
  testWorkflowAction(id: String!): WorkflowAction!
  createOneWorkflowTrigger(input: CreateOneWorkflowTriggerInput!): WorkflowTrigger!
  createManyWorkflowTriggers(input: CreateManyWorkflowTriggersInput!): [WorkflowTrigger!]!
  updateOneWorkflowTrigger(input: UpdateOneWorkflowTriggerInput!): WorkflowTrigger!
  updateManyWorkflowTriggers(input: UpdateManyWorkflowTriggersInput!): UpdateManyResponse!
  deleteOneWorkflowTrigger(input: DeleteOneWorkflowTriggerInput!): WorkflowTriggerDeleteResponse!
  deleteManyWorkflowTriggers(input: DeleteManyWorkflowTriggersInput!): DeleteManyResponse!
  checkWorkflowTrigger(id: String!): WorkflowTrigger!
  testWorkflowTrigger(id: String!): WorkflowTrigger!
  runWorkflowTriggerLastEvent(id: String!): WorkflowTrigger!
  runWorkflowTriggerHistory(id: String!): WorkflowTrigger!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUserInput!
}

input UpdateUserInput {
  name: String
  email: String
  subscribedToNotifications: Boolean
  subscribedToNewsletter: Boolean
}

input CreateOneAccountCredentialInput {
  """The record to create"""
  accountCredential: CreateAccountCredentialInput!
}

input CreateAccountCredentialInput {
  integrationAccount: ID!
  name: String!
  credentialInputs: JSONObject
  fields: JSONObject
}

input CreateManyAccountCredentialsInput {
  """Array of records to create"""
  accountCredentials: [CreateAccountCredentialInput!]!
}

input UpdateOneAccountCredentialInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAccountCredentialInput!
}

input UpdateAccountCredentialInput {
  name: String
  credentialInputs: JSONObject
  fields: JSONObject
}

input UpdateManyAccountCredentialsInput {
  """Filter used to find fields to update"""
  filter: AccountCredentialUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAccountCredentialInput!
}

input AccountCredentialUpdateFilter {
  and: [AccountCredentialUpdateFilter!]
  or: [AccountCredentialUpdateFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  integrationAccount: IDFilterComparison
}

input DeleteOneAccountCredentialInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyAccountCredentialsInput {
  """Filter to find records to delete"""
  filter: AccountCredentialDeleteFilter!
}

input AccountCredentialDeleteFilter {
  and: [AccountCredentialDeleteFilter!]
  or: [AccountCredentialDeleteFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  integrationAccount: IDFilterComparison
}

input CreateOneWorkflowInput {
  """The record to create"""
  workflow: CreateWorkflowInput!
}

input CreateWorkflowInput {
  name: String!
  runOnFailure: ID
  isPublic: Boolean
  templateSchema: JSONObject
}

input CreateManyWorkflowsInput {
  """Array of records to create"""
  workflows: [CreateWorkflowInput!]!
}

input UpdateOneWorkflowInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateWorkflowInput!
}

input UpdateWorkflowInput {
  name: String
  runOnFailure: ID
  isPublic: Boolean
  templateSchema: JSONObject
}

input UpdateManyWorkflowsInput {
  """Filter used to find fields to update"""
  filter: WorkflowUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateWorkflowInput!
}

input WorkflowUpdateFilter {
  and: [WorkflowUpdateFilter!]
  or: [WorkflowUpdateFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  name: StringFieldComparison
}

input DeleteOneWorkflowInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyWorkflowsInput {
  """Filter to find records to delete"""
  filter: WorkflowDeleteFilter!
}

input WorkflowDeleteFilter {
  and: [WorkflowDeleteFilter!]
  or: [WorkflowDeleteFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  name: StringFieldComparison
}

input CreateOneWorkflowActionInput {
  """The record to create"""
  workflowAction: CreateWorkflowActionInput!
}

input CreateWorkflowActionInput {
  name: String
  workflow: ID!
  integrationAction: ID!
  inputs: JSONObject!
  previousAction: ID
  previousActionCondition: String
  nextAction: ID
  credentials: ID
}

input CreateManyWorkflowActionsInput {
  """Array of records to create"""
  workflowActions: [CreateWorkflowActionInput!]!
}

input UpdateOneWorkflowActionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateWorkflowActionInput!
}

input UpdateWorkflowActionInput {
  name: String!
  inputs: JSONObject
  credentials: ID
  address: String
}

input UpdateManyWorkflowActionsInput {
  """Filter used to find fields to update"""
  filter: WorkflowActionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateWorkflowActionInput!
}

input WorkflowActionUpdateFilter {
  and: [WorkflowActionUpdateFilter!]
  or: [WorkflowActionUpdateFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  workflow: IDFilterComparison
  isRootAction: BooleanFieldComparison
}

input DeleteOneWorkflowActionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyWorkflowActionsInput {
  """Filter to find records to delete"""
  filter: WorkflowActionDeleteFilter!
}

input WorkflowActionDeleteFilter {
  and: [WorkflowActionDeleteFilter!]
  or: [WorkflowActionDeleteFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  workflow: IDFilterComparison
  isRootAction: BooleanFieldComparison
}

input CreateOneWorkflowTriggerInput {
  """The record to create"""
  workflowTrigger: CreateWorkflowTriggerInput!
}

input CreateWorkflowTriggerInput {
  name: String
  workflow: ID!
  integrationTrigger: ID!
  inputs: JSONObject!
  credentials: ID
  schedule: JSONObject
  enabled: Boolean
  maxConsecutiveFailures: Int
}

input CreateManyWorkflowTriggersInput {
  """Array of records to create"""
  workflowTriggers: [CreateWorkflowTriggerInput!]!
}

input UpdateOneWorkflowTriggerInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateWorkflowTriggerInput!
}

input UpdateWorkflowTriggerInput {
  name: String
  inputs: JSONObject
  credentials: ID
  schedule: JSONObject
  enabled: Boolean
  maxConsecutiveFailures: Int
}

input UpdateManyWorkflowTriggersInput {
  """Filter used to find fields to update"""
  filter: WorkflowTriggerUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateWorkflowTriggerInput!
}

input WorkflowTriggerUpdateFilter {
  and: [WorkflowTriggerUpdateFilter!]
  or: [WorkflowTriggerUpdateFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  workflow: IDFilterComparison
}

input DeleteOneWorkflowTriggerInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyWorkflowTriggersInput {
  """Filter to find records to delete"""
  filter: WorkflowTriggerDeleteFilter!
}

input WorkflowTriggerDeleteFilter {
  and: [WorkflowTriggerDeleteFilter!]
  or: [WorkflowTriggerDeleteFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  workflow: IDFilterComparison
}
